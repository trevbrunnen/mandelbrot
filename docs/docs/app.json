[{"name": "app.py", "content": "from shiny import App, render, ui, reactive\nimport mandelbrot\nimport seaborn as sns\n\n\n\napp_ui = ui.page_fluid(\n    \n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider('x',\"X Range\", value=(-1,1), min=-2, max = 2, step = 0.1),\n            ui.input_slider('y',\"Y Range\", value=(-1,1), min=-2, max = 2, step = 0.1),\n            ui.input_slider('depth',\"Depth\", value=10, min=1, max = 50),\n            ui.input_slider('resolution',\"Resolution\", value=100, min=10, max = 500),\n            ui.input_action_button('plot','Plot!'),\n        ),\n        ui.panel_main(\n            ui.output_plot('mandelbrot_plot'),\n        ),\n    ),    \n    \n    \n    )\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def mandelbrot_plot():\n        input.plot()\n        with reactive.isolate():\n            results, x_label, y_label = mandelbrot.calculate(input.x(),(input.y()[1],input.y()[0]),\n                                           input.resolution(),input.depth())\n            return sns.heatmap(results.transpose())\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "mandelbrot.py", "content": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Oct  6 16:51:40 2023\n\n@author: trevb\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\n\ndef mandelbrot(x, y, x0, y0, depth, max_depth):\n    if((x**2 + y**2 > 2) or (depth >= max_depth)):\n        return depth\n    else:\n        x_new = x**2 - y**2 + x0\n        y_new = 2*x*y + y0\n        return mandelbrot(x_new, y_new, x0, y0, depth + 1, max_depth)\n\ndef calculate(xrange, yrange, resolution, depth):\n    x = np.linspace(xrange[0], xrange[1], resolution)\n    y = np.linspace(yrange[0], yrange[1], resolution)\n    \n    results = np.zeros((resolution,resolution))\n    for i in range(resolution):\n        for j in range(resolution):\n            results[i,j] = mandelbrot(x[i],y[j],x[i],y[j],0,depth)\n\n    return results, x, y\n\nif __name__ == '__main__':\n    \n    x = np.linspace(-2,2,200)\n    y = np.linspace(-2,2,200)\n    \n    results = np.zeros((len(x),len(y)))\n    for i in range(len(x)):\n        for j in range(len(y)):\n            results[i,j] = mandelbrot(x[i],y[j],x[i],y[j],0,20)\n        print(i)", "type": "text"}]